{
	// Place your haha workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console"
	// }
	"add":{
		"prefix": "add_db",
		"body":[
			"const will_add_mongo_data = new $1(",
"                {",
"                   $2",
"                }",
"            )",
"            await will_add_mongo_data.save((err: any, res: any) => {",
"",
"                if (err) {",
"                    console.log(\"Error:\" + err);",
"",
"                }",
"                else {",
"                    console.log(\"Res:\" + res);",
"                }",
"",
"            })",
"",

		]

	},
	"find":{
		"prefix": "search_db",
		"body": [
			"//查找",
"const data = await $1.findOne({",
"    $2",
"}).exec()",
"if (data) {",
"$4",
"}",
"else{",
"return ctx.body=$3",
"",

		],
		"description": "",
	},
	"test":{
		"prefix":"test",
		"body": "struct ${TM_FILENAME/(.*)\\..+$/$1/} {\n\t$2\n};"
	},
	"check":{
		"prefix":"check",
		"body": [
			"// 检查数据",
" let params = [\"$1\", \"$2\", \"$3\",\"$4\",\"$5\",\"$6\",\"$7\",\"$8\",\"$9\",\"$10\",]",
" params=params.filter((value)=>{",
"     return value!==\"\"",
" })",
" if (!check_state_object_has_property(ctx, ...params)) {",
"     return ctx.body = incomplete_param_info",
" }",
"//提前参数",
" const {",
"     $1,",
"     $2,",
"     $3,",
"     $4,",
"     $5,",
"     $6,",
"     $7,",
"     $8,",
"     $9,",
"     $10",
" } = ctx.state.private_params",

		]
	},
	"control":{
		"prefix": "control",
		"body": [
			"import { check_state_object_has_property } from \"./../../utils/check\"",
			"import { incomplete_param_info } from \"../../utils/info\"",
"",
"",
" function control() {",
"    return async function (ctx: any, next: Function) {",
"                             $2",
"    }",
"}",
"module.exports = {",
	"    method:\"${1|POST,GET|}\",",
	"    function:control",
	"}",
	

		]
	},
	"info":{
		"prefix": "new_info",
		"body":[
			
		]
	}
	



}